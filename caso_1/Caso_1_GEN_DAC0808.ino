const int pinesDAC[8] = {2, 3, 4, 5, 6, 7, 8, 9};

//const uint8_t onda_senoidal[64] = {
  //127,140,152,165,176,187,197,206,
  //213,219,224,227,229,230,229,227,
  //224,219,213,206,197,187,176,165,
  //152,140,127,115,103, 90, 79, 68,
   //58, 49, 42, 36, 31, 28, 26, 25,
   //26, 28, 31, 36, 42, 49, 58, 68,
   //79, 90,103,115,127,140,152,165,
  //176,187,197,206,213,219,224,227};

  //const uint8_t onda_senoidal[64] = {
  //127, 139, 152, 164, 176, 187, 198, 208,
  //217, 226, 233, 239, 245, 249, 252, 254,
  //255, 254, 252, 249, 245, 239, 233, 226,
  //217, 208, 198, 187, 176, 164, 152, 139,
  //127, 115, 102, 90, 78, 67, 56, 46,
  //37, 28, 21, 15, 9, 5, 2, 0,
  //0, 0, 2, 5, 9, 15, 21, 28,
  //37, 46, 56, 67, 78, 90, 102, 115
  //};

//const uint8_t onda_triangular[64] = {
  //0,8,16,24,32,40,48,56,
  //64,72,80,88,96,104,112,120,
  //128,136,144,152,160,168,176,184,
  //192,200,208,216,224,232,240,248,
  //255,248,240,232,224,216,208,200,
  //192,184,176,168,160,152,144,136,
  //128,120,112,104,96,88,80,72,
  //64,56,48,40,32,24,16,8
//};

//const uint8_t onda_cuadrada[64] = {
  //255,255,255,255,255,255,255,255,
  //255,255,255,255,255,255,255,255,
  //0,0,0,0,0,0,0,0,
  //0,0,0,0,0,0,0,0,
  //255,255,255,255,255,255,255,255,
  //255,255,255,255,255,255,255,255,
  //0,0,0,0,0,0,0,0,
  //0,0,0,0,0,0,0,0
//};

//const uint8_t diente_sierra[64] ={
  //0,8,16,24,32,40,48,56,
  //64,72,80,88,96,104,112,120,
  //128,136,144,152,160,168,176,184,
  //192,200,208,216,224,232,240,248,
  //0,8,16,24,32,40,48,56,
  //64,72,80,88,96,104,112,120,
  //128,136,144,152,160,168,176,184,
  //192,200,208,216,224,232,240,248
//};

const uint8_t onda_senoidal[256] = {
  127, 130, 133, 136, 139, 143, 146, 149, 152, 155, 
  158, 161, 164, 167, 170, 173, 176, 179, 182, 184, 
  187, 190, 193, 195, 198, 200, 203, 205, 208, 210, 
  213, 215, 217, 219, 221, 224, 226, 228, 229, 231, 
  233, 235, 236, 238, 239, 241, 242, 244, 245, 246, 
  247, 248, 249, 250, 251, 251, 252, 253, 253, 254, 
  254, 254, 254, 254, 255, 254, 254, 254, 254, 254, 
  253, 253, 252, 251, 251, 250, 249, 248, 247, 246, 
  245, 244, 242, 241, 239, 238, 236, 235, 233, 231, 
  229, 228, 226, 224, 221, 219, 217, 215, 213, 210, 
  208, 205, 203, 200, 198, 195, 193, 190, 187, 184, 
  182, 179, 176, 173, 170, 167, 164, 161, 158, 155, 
  152, 149, 146, 143, 139, 136, 133, 130, 127, 124, 
  121, 118, 115, 111, 108, 105, 102, 99, 96, 93, 90, 
  87, 84, 81, 78, 75, 72, 70, 67, 64, 61, 59, 56, 54, 
  51, 49, 46, 44, 41, 39, 37, 35, 33, 30, 28, 26, 25, 23, 21, 19, 18, 16, 15, 13, 12, 10, 9, 8, 7, 6, 5, 4, 3, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 21, 23, 25, 26, 28, 30, 33, 35, 37, 39, 41, 44, 46, 49, 51, 54, 56, 59, 61, 64, 67, 70, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 115, 118, 121, 124
}; 

const uint8_t onda_triangular[256] = {
  0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
  64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
  128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
  192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
  255,253,251,249,247,245,243,241,239,237,235,233,231,229,227,225,223,221,219,217,215,213,211,209,207,205,203,201,199,197,195,193,
  191,189,187,185,183,181,179,177,175,173,171,169,167,165,163,161,159,157,155,153,151,149,147,145,143,141,139,137,135,133,131,129,
  127,125,123,121,119,117,115,113,111,109,107,105,103,101,99,97,95,93,91,89,87,85,83,81,79,77,75,73,71,69,67,65,
  63,61,59,57,55,53,51,49,47,45,43,41,39,37,35,33,31,29,27,25,23,21,19,17,15,13,11,9,7,5,3,1
};

const uint8_t onda_cuadrada[256] = {
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};

const uint8_t onda_sierra[256] = {
  0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 
  19, 21, 23, 25, 27, 29, 31, 33, 
  35, 37, 39, 41, 43, 45, 47, 49, 
  51, 53, 55, 57, 59, 61, 63, 65, 
  67, 69, 71, 73, 75, 77, 79, 81, 
  83, 85, 87, 89, 91, 93, 95, 97, 
  99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 
  129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 
  159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 
  189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 
  219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 
  249, 251, 253, 0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 
  33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 
  71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107,
  109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139,
  141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171,
  173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203,
  205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235,
  237, 239, 241, 243, 245, 247, 249, 251, 253
};

const int N = 256;

int forma_de_onda = 0;

const int pull = 10;

void setup() {
  for (int i = 0; i < 8; i++) {
    pinMode(pinesDAC[i], OUTPUT);
  }
  pinMode(pull, INPUT_PULLUP);
}

void enviarDAC(uint8_t valor) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(pinesDAC[i], (valor >> i) & 0x01);
  }
}

void loop() {
  static bool pull_prev = HIGH;
  bool pull_actual = digitalRead(pull);

  if (pull_prev == HIGH && pull_actual == LOW) {
    forma_de_onda = (forma_de_onda + 1) % 4; // Cambia entre 0, 1, 2 y 3
    delay(300); // Debouncing simple
  }
  pull_prev = pull_actual;

  for (int i = 0; i < N; i++) {
    uint8_t valor = 0;

    if (forma_de_onda == 0) {
      valor = onda_senoidal[i];
    } else if (forma_de_onda == 1) {
      valor = onda_triangular[i];
    } else if (forma_de_onda == 2) {
      valor = onda_cuadrada[i];
    } else if (forma_de_onda == 3) {
      valor = onda_sierra[i];
    }
  //for (int i = 0; i < N; i++) {
    //enviarDAC(diente_sierra[i]);
    enviarDAC(valor);
    delayMicroseconds(250); // Ajusta para controlar frecuencia
  }
}
